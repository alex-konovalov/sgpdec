 We consider hierarchical decompositions of finite transformation semigroups
 and permutation groups, where hierarchical means that there are only
 unidirectional connections among the components, or saying it algebraically,
 we study substructures of wreath products. The novelty of this approach is
 that we can explicitly represent and therefore we can examine directly the
 elements of the wreath product with their full structure, i.e. dependency
 functions from the state sets of components of the levels above in the
 hierarchy (see <Cite Key="cascprod_arxiv"/>). 

<P/>
Basically, there are two different ways of using the <Package>SgpDec</Package> package. Depending on whether the starting point is a set of building blocks a complex structure, we can do composition and decomposition.

<Section><Heading>Compositions</Heading>

A commonly used method for defining semigroups and groups is to give a generator set.
We build composite semigroups  by giving a set of generators.  So, what are these generators?
Given a list of components (or at least a list of the number of states at each level starting from the top ),  the generators are elements of the wreath product of these components. We call these <E>cascades</E>, they are tuples of dependency functions (see Chapter <Ref Sect="ch:depfunc" Style="Text"/> and <Ref Sect="ch:cascade" Style="Text"/>)

<Example><![CDATA[
gap> c := Cascade([2,2], [ [[],(1,2)], [[2], (1,2)]  ]);  
<trans cascade with 2 levels with (2, 2) pts, 2 dependencies>
gap> mod4counter := SemigroupByGenerators([c]);         
<cascade semigroup with 1 generator, 2 levels with (2, 2) pts>
gap> AsList(mod4counter);                               
[ <trans cascade with 2 levels with (2, 2) pts, 2 dependencies>, 
  <trans cascade with 2 levels with (2, 2) pts, 2 dependencies>, 
  <trans cascade with 2 levels with (2, 2) pts, 2 dependencies>, 
  <trans cascade with 2 levels with (2, 2) pts, 0 dependencies> ]
gap> StructureDescription(Range(IsomorphismPermGroup(mod4counter)));
"C4"
]]></Example>


</Section>

<Section><Heading>Decompositions</Heading>

Finding components and the hierarchical connections between the components for  a non-simple semigroup/group, establishing homo/isomorphims between the original structure and the cascaded product.  
<Br/>
A typical scenario is that for a given composite semigroup or group we choose a decomposition algorithm which returns a cascade product. For permutation groups the Frobenius-Lagrange coordinatization  (see Chapter <Ref Sect="ch:fl" Style="Text"/>),  for transformation semigroups the holonomy method can be  used (see Chapter <Ref Sect="ch:holonomy" Style="Text"/>).


</Section>
